# !/bin/bash
#
# script creation - 02/07/2021-16:00 

abort_if_not_exists() {
  key_name=$1
  value=$2
  if [[ -z "$value" ]]; then
    echo "Aborting: 1 $key_name argument is required."; return 1
  fi
}

check_for_jmespath() {
  if ! type jp > /dev/null; then
    echo "you need to install jmespath to run these commands"
    echo "https://github.com/jmespath/jp"
    return 1
  fi
}

copy_format_to_clipboard() {
  value=$1
  message=$2

  #using % for the sed separator b/c ip address uses /
  echo $(echo $message | sed "s%@@%$value%")
  echo $value | xclip -sel clip
}

has_results() {
  count=$(echo $1 | jp "length(@)")

  if [ $count -eq 0 ]; then
    echo "no results"
    return 1;
  fi
}

is_empty() {
  if [[ -z "$1" ]] || [[ $1 == "null" ]]; then
    echo "no results"
    return 1;
  fi
}

getresourcebyname() {
  abort_if_not_exists "resource name" $1 || return 1

  local resource=$1
  local contains=$2

  local describe_name=$(echo $1 | tolower)
  local main_prop=$(echo $1 | sed 's/-//g')

  # added this b/c Instances maps differently from others
  # most map this way -> resource = SecurityGroups, then main prop will be SecurityGroups
  if [[ "$resource" == "Instances" ]]; then
    main_prop="Reservations[].Instances"
  fi


  if [[ -z "$contains" ]]; then
    aws ec2 describe-$describe_name \
      --query $main_prop"[]"
  else
    aws ec2 describe-$describe_name \
      --query $main_prop"[?Tags[?Key=='Name'&&contains(Value,'$contains')]]"
  fi
}


