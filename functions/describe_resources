# !/bin/bash
#
# script creation - 02/10/2021-20:15 

validateparams () {
  local resource=$1
  local service=$2
  local where=$3
  local test=$4

  check_for_jmespath || return 1
  abort_if_not_exists "| -r resource name" "$resource" || return 1
  abort_if_not_exists "| -s service name" "$service" || return 1
  
  if [[ -n "$where" ]] || [[ -n "$test" ]]; then
    abort_if_not_exists "| -w where name" "$where" || return 1
    abort_if_not_exists "| -t test name" "$test" || return 1
  fi
}

ec2deletetags() {
  while getopts r:t: flag
  do
      case "${flag}" in
          r) local resourceids=${OPTARG};;
          t) local tags=${OPTARG};;
      esac
  done

  ec2managetags $resourceids $tags "delete"
}

ec2createtags() {
  while getopts r:t: flag
  do
      case "${flag}" in
          r) local resourceids=${OPTARG};;
          t) local tags=${OPTARG};;
      esac
  done

  ec2managetags $resourceids $tags "create"
}

ec2managetags() {
  resourceids=$1
  tags=$2
  manipulation_type=$3

  if [[ $manipulation_type != "create" ]] && [[ $manipulation_type != "delete" ]]; then
    echo "can only create or delete, if not passed, will cancel"
    return 1;
  fi

  IFS=','

  echo $tags | read -A tags
  local totaltags=${#tags[@]}

  IFS='|'
  alltags=""
  for i in {1..$totaltags}
  do
    if [[ "$tags[$i]" != *"|"* ]]; then
      if [[ "$manipulation_type" == "delete" ]]; then
        #we will only set if delete, if create, skip b/c value was not sent
        key=$(echo "$tag[1]" | sed 's/ //g')
        alltags=$alltags"Key=$key "
      fi
    else
      echo $tags[$i] | read -A tag
      key=$(echo "$tag[1]" | sed 's/ //g')
      value=$(echo "$tag[2]" | sed 's/ //g')
      alltags=$alltags"Key=$key,Value=$value "
    fi
  done

  # was having an issue trying to run this command w/o eval,
  # was blowing up
  if [[ -n "$alltags" ]]; then
    eval aws ec2 $manipulation_type-tags --resources "$resourceids" --tags "$alltags"
  else
    echo "no tags to set"
  fi
}

ec2getdata() {
  # set the options for all the flags
  while getopts r:w:t:n:p: flag
  do
      case "${flag}" in
          r) local resource=${OPTARG};;
          w) local where=${OPTARG};;
          t) local test=${OPTARG};;
          n) local name=${OPTARG};;
          p) local pick=${OPTARG};;
      esac
  done

  resourcegetdata -s ec2 -r "$resource" -w "$where" -t "$test" -n "$name" -p "$pick"

}

resourcegetdata() {
  # set the options for all the flags
  while getopts r:w:s:t:n:p: flag
  do
      case "${flag}" in
          r) local resource=${OPTARG};;
          w) local where=${OPTARG};;
          s) local service=${OPTARG};;
          t) local test=${OPTARG};;
          n) local name=${OPTARG};;
          p) local pick=${OPTARG};;
      esac
  done

  validateparams "$resource" "$service" "$where" "$test" || return 1

  local results=$(getresourcebyname $service $resource $name)

  if [[ -n "$where" ]] && [[ -n "$test" ]]; then
    # will make a query to compare a string or boolean depending on what test is passed in
    if [[ "$test" == "true" ]] || [[ "$test" == "false" ]]; then
      if [[ "$test" == "false" ]]; then
        local not=!
      fi
      results=$(echo $results | jp "@[?$not$where][]")
    else
      results=$(echo $results | jp "@[?contains($where,'$test')][]")
    fi
  fi

  has_results $results || return 1

  # creating the where part of the query if where exists
  if [[ -n "$where" ]]; then
    local whereprop=$(echo "$where" | sed 's/[^a-zA-Z]//g')
    local wherequery="$whereprop:$where,"
  fi

  if [[ -n "$pick" ]]; then
    #gets the prop but strips all non alphabets so the prop does not fail with non alpha characters
    #example Attachment[].Vpc will be AttachmentVpc
    local pickprop=$(echo "$pick" | sed 's/[^a-zA-Z]//g')
    echo $pickprop

    #the query will now include the where and the pick but only if pick exists
    results=$(echo $results | jp "@[].[{"$wherequery""$pickprop":$pick,Name:(Tags[?Key=='Name'])[0].Value}][]")
    #getting the pick prop value to copy to the clipboard
    propvalue=$(echo $results | jp "@[0].$pickprop")

    is_empty $propvalue || return 1
    echo $results
    copy_format_to_clipboard "$propvalue" "copied $pick value '@@' to clipboard" 2> /dev/null
  else
    #if we get here, we do not have a pick but if we have a where prop, will copy it to clipboard
    if [[ -n "$where" ]]; then
      local propvalue=$(echo $results | jp "@[0].$where")
      echo $results
      copy_format_to_clipboard "$propvalue" "copied $where value [@@] to clipboard" 2> /dev/null
    else
      echo $results
    fi
  fi
}
